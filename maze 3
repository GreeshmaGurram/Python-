input: 
4 5 0 1 3
1 1 1 1 1 
1 1 1 1 -1
1 1 -1 -1 -1
-1 1 1 -1 -1
output:
[[0, 1, 2, 3], [0, 1], [-1]]

code:
grid = []

def read_grid(no_of_rows, no_of_cols):
    for i in range(no_of_rows):
        row = list(map(int, input().split()))
        grid.append(row)

def get_adjacent_column_values(current_row, current_col):
    if grid[current_row][current_col] == 1:
        return current_col + 1 
    return current_col - 1 

def get_next_position_values(current_row, current_col, adj_col):
    if adj_col >= 0 and adj_col < no_of_cols:
        if grid[current_row][current_col] == grid[current_row][adj_col]:
            return current_row + 1, adj_col
    return current_row, current_col

def get_row_indexes(no_of_rows, current_col):
    current_row = 0
    row_indexes = []
    while current_row < no_of_rows:
        adj_col = get_adjacent_column_values(current_row, current_col)
        next_row, current_col = get_next_position_values(current_row, current_col, adj_col)
        if next_row != current_row:
            row_indexes.append(next_row-1)
        else:
            break
        current_row += 1
    return row_indexes
        
        
def main():
    global grid, no_of_rows, no_of_cols, x, y, z 
    no_of_rows, no_of_cols, x, y, z = map(int, input().split())
    read_grid(no_of_rows, no_of_cols)
    robots_passed_through_x = []
    robots_passed_through_y = []
    robots_passed_through_z = []
    for entry_point in range(no_of_cols):
        row_indexes = get_row_indexes(no_of_rows, entry_point)
        for i in range(len(row_indexes)):
            if row_indexes[i] == x:
                robots_passed_through_x.append(entry_point)
            elif row_indexes[i] == y:
                robots_passed_through_y.append(entry_point)
            elif row_indexes[i] == z:
                robots_passed_through_z.append(entry_point)
    if len(robots_passed_through_x) == 0:
        robots_passed_through_x = [-1]
    if len(robots_passed_through_y) == 0:
        robots_passed_through_y = [-1]
    if len(robots_passed_through_z) == 0:
        robots_passed_through_z = [-1]
    ouput_arr = [robots_passed_through_x] + [robots_passed_through_y] + [robots_passed_through_z]
    print(ouput_arr)
                
    
main()
