Operators: 3 types => 1. unary(operation on one operand) Ex: a++, 2. binary(operation on 2 operands) Ex: a+b, 3. ternary(operation on 3 operands) Ex: condition ? true : false
Class: blueprint containing attributes and behaviours of an object. has 2 types of variables: 1. class variables => common among all the instances of objects further created, 2. Instance varibales => unique to the instance of an 
object created
Class constructors: class can have 1 or more constructors. Types of constructors: 1. default constructor: constructor with no params => creates object with default vals specified by the programmer, 
2. Parameterized constructor: takes 1/ more params, 3. Overloaded constructor: multiple constructors in a class where each constructor takes in different params
Ex: In Java
class Dog{ // class name
    static String unnamed = "I need a name!"; // class variable
    int weight; // instance variable
    String name; // instance variable
    String coatColor; // instance variable
    
    Dog(){ // default constructor
        this.weight = 0;
        this.name = unnamed;
        this.coatColor = "none";
    }
    Dog(int weight, String color){ // parameterized constructor
        // initialize instance variables
        this.weight = weight; // assign parameter's value to instance variable
        this.name = unnamed; 
        this.coatColor = color; 
    }
    Dog(String dogName, String color){ // overloaded parameterized constructor
        // initialize instance variables
        this.weight = 0;
        this.name = dogName; 
        this.coatColor = color; 
    }
}

class Person:
    def __init__(self,initialAge):
        # Add some more code to run some checks on initialAge
       if initialAge > 0:
            self.age = initialAge
       else:
            self.age = 0
            print('Age is not valid, setting age to 0.') // checking the initialAge before setting it to age
    def amIOld(self):
        # Do some computations in here and print out the correct statement to the console
        if self.age < 13:
            print('You are young.')
        elif 13 <= self.age < 18:
            print('You are a teenager.')
        else:
            print('You are old.')
    def yearPasses(self):
        # Increment the age of the person in here
        self.age += 1

t = int(input())
for i in range(0, t):
    age = int(input())         
    p = Person(age)  
    p.amIOld()
    for j in range(0, 3):
        p.yearPasses()       
    p.amIOld()
    print("")

Dictonary: unordered set of key value pairs with "keys being unique and immuntable",  "Access or add Values using bracket notation" Ex: new_dict[name] = name, not new_dict.name = name

Binary Number
input: 65535 => binary equivalent : 1111111111111111 => no of 1s repeating continuously
output = 16
import math
import os
import random
import re
import sys



if __name__ == '__main__':
    n = int(input().strip())

binary_number = ''
while n > 0:
    remainder = n % 2
    binary_number = str(remainder) + binary_number
    n = n//2

final_count = 1
count = 1
for i in range(len(binary_number)):
    if (i < (len(binary_number) - 1)) and (binary_number[i] == '1') and (binary_number[i+1] == '1'):
        count += 1
    if binary_number[i] == '0':
        if count > final_count:
            final_count = count
        count = 1

if count > final_count:
    final_count = count
    
print(final_count)
         
better approach
#!/bin/python3

import math
import os
import random
import re
import sys



if __name__ == '__main__':
    n = int(input().strip())

binary_number = ''
while n > 0:
    remainder = n % 2
    binary_number = str(remainder) + binary_number
    n = n//2

final_count = 0
count = 0
for i in range(len(binary_number)):
    if binary_number[i] == '1':
        count += 1
    else:
        count = 0
    if count > final_count:
        final_count = count
    
print(final_count)

homogeneous list: all the elements in the list are of same data type Ex: a = [1,2,3,4,5]
heterogeneous list: all the elements in the list are of different data types Ex: a = [1, 'G', 1.5]

CQ: Coding Question: Max sum of hourglass
input: 
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 2 4 4 0
0 0 0 2 0 0
0 0 1 2 4 0
output: 19
code:
#!/bin/python3

import math
import os
import random
import re
import sys



if __name__ == '__main__':

    arr = []

    for _ in range(6):
        arr.append(list(map(int, input().rstrip().split())))

def get_hour_glass_sum(matrix, i, j):
    sum_of_hour_glass = 0
    for row in range(3):
        for col in range(3):
            if row != 1:
                sum_of_hour_glass += matrix[i+row][j+col]
            else:
                sum_of_hour_glass += matrix[i+1][j+1]
                break
    return sum_of_hour_glass

max_sum = []
for i in range(0, len(arr)):
    for j in range(0, len(arr)):
        if j < len(arr) - 2 and (i < (len(arr) -2)):
            sum_of_hour_glass = get_hour_glass_sum(arr, i, j)
            max_sum.append(sum_of_hour_glass)
max_sum.sort()
print(max_sum[-1])
